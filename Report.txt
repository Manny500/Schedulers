Project 2 Scheduling Algorithms Report:

1. A short introduction to the problem you are trying to solve.

	The objective of this project was too find out which scheduling algorithms worked the best and in what cases. Different scheduling algorithms are used depending on the overall burst times, arrival times, and the level of priority that each process carries. Depending on what kind of a system the programmer is programming for, a certain scheduling algorithm would be more beneficial over another. This project will try to answer the question of what algorithm to use depending on the programs needs and priorities.

2. A description of the how each of the scheduling methods work, including your hybrid one.


	All algorithms are called from main using the scheduler method, which takes two parameters. The first parameter is a string that specifies what algorithm the user wants to use as a scheduler. The second parameter is a string that specifies that text file from where to obtain the list of processes.

	FCFS:
	
		The FCFS algorithm is very straight forward. It will first sort the list (ArrayList) of processes in order of arrival time (from lowest to highest). That way the method can know the order of arrival. A for loop will go around and obtain the first process that has arrived, at this time the waiting and response times are set. The method will then proceed to run its complete burst time in a while loop, each time decrementing its burst time until its burst time is up (burst time equals to zero). Then it will go up to the for loop again and get the next process that has arrived, then repeating the previous steps it continues. The FCFS method will continue to run until the for loop reaches the end of the list and all process are finished (burst time equals to zero). The last thing the method does is calculate the average waiting and average response times using the previously set waiting and response times.

	SJF:

		The SJF algorithm is very similar to the FCFS algorithm. It will first sort the list (ArrayList) of processes in order of burst time (from lowest to highest). That way the method can know the order of the burst time. While the list is not empty a for loop will go around and obtain the first process that has arrived, at this time the waiting and response times are set. The method will then proceed to run its complete burst time in a while loop, each time decrementing its burst time until its burst time is up (burst time equals to zero). Before returning back to the for loop to look for the next shortest process, the method will remove the process from the original list and add it to a queue (ArrayList). Then it will go up to the for loop again and get the next process that has arrived, then repeating the previous steps it continues. The SJF method will continue to run until there are no process in the list and all process are finished (burst time equals to zero). The last thing the method does is calculate the average waiting and average response times using the previously set waiting and response times (obtains processes from the queue).

	SRTF:

		The SRTF algorithm is the first to have preemptive technology. It will first sort the list (ArrayList) of processes in order of burst time (from lowest to highest). That way the method can know the order of the burst time. While the list is not empty a for loop will go around and obtain the first process that has arrived, at this time the response times are set. The method will then proceed to run only one CPU cycle, at each cycle the method has to check if it is still the shortest burst time. The method then sorts the list again. It then goes back to the for loop to look for the next shortest process, if there is a process with burst time equal to zero the method will remove the process from the original list and add it to a queue (ArrayList). At this time the waiting time is calculated. The SRTF method will continue to run until there are no process in the list and all process are finished (burst time equals to zero). The last thing the method does is calculate the average waiting and average response times using the previously set waiting and response times (obtains processes from the queue).

	Nonpreprior:
	
		The Nonpreprior algorithm will start by sorting the list of processes by priority, our sorting algorithm uses insertion sort to do this. It will then loop through the list to find the highest priority process that has arrived, and run that process completely. While that process is running, any other process that has arrived at the cpu will have its priority increase while it's waiting, this is what we call aging. When the process finishes it is added to the queue and removed from the list. Next we go back and sort the list by priority again and repeat the steps. After the list is empty we loop through the queue and calculate the average waiting and response times, as well as the weighted waiting and response times. It is fairly simple because each process sets the response time when it starts to run.

	Preprior:
	
		Preprior is very similar to nonpreprior, however there is one key difference and this is that during each unit of cpu time the scheduler will run the process with the highest priority. This means that unlike nonpreprior the scheduler is constantly switching between processes and running the highest priority. Aging plays a much larger role here than it does in Nonpreprior because the priorities are constantly being checked. Waiting time is calculated by each process keeping track of when it has arrived but isn't running, and response time is recorded when a process first runs in the cpu.

	RR:
	
		The Round Robin algorithm starts with sorting the list by arrival time. It will then loop through the list and run each process, once it has arrived, for a specified time quantum (our quantum is set to 2) and then move it to the end of the list. In this manner the scheduler will evenly run through all of the processes. Waiting and response time are calculated in a similar way to preprior, keeping track of the values for each process and then taking the averages at the end. 

	Hybrid:
	
		Simply put our Hybrid algorithm is a mix between round robin and preprior. It will sort the list by arrival time and then run the highest priority process from the first half of the list for a specified time quantum. Once the time quantum is up, the process will be moved to the end of the list and it will run the highest priority process from the first half again. If no process has arrived then it will look in the second half of the list. When a process completes it is removed from the list and added to the queue. These steps will repeat until all processes have been completed, and then average times are calculated at the end in the same way as round robin because the processes keep track of each individual waiting and response time respectively.

3. A description of your code design and your choice of data structures.

	Our program utilizes four major Java classes in order to accomplish the task at hand. The title of the classes are as follows: the PROCESS object class, the main SCHEDULER class, the PARSE class, and the ALGORITHMS class. The process class is used to create different processes/tasks. We decided to make the processes objects, it is easier to assign and obtain information from the processes that way. The parsing class is used to handle any incoming files containing processes, it stores and creates the new processes in a database. To store the processes (our database) we choose to use ArrayList because of its flexibility and dynamic expansion and contraction. The algorithm class is where all the different scheduling algorithms are coded and called from. This helps organize all the scheduling algorithms in one place. Lastly the scheduler class acts as our main and using the other classes it runs the algorithmsâ€™s analysis. Note: Each scheduling algorithm should be run separately in order to avoid any mistakes, since the process from the database are constantly being changed.

4. Correctness Results - In this section you should present the results for each scheduler in the following way:

	a. Show a small input file (around 4 processes).

		Small-process.txt:

		p1: 101 10 0 1
		p2: 102 8 0 3
		p3: 103 5 5 5
		p4: 104 4 7 10

	b. Manually draw a Gantt Chart to represent the scheduling.

		FCFS -

				0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
				x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x  x
				p1  p1  p1  p1  p1  p1  p1  p1  p1  p1 p2  p2  p2  p2  p2  p2  p2  p2  p3  p3 p3

				21  22  23  24  25  26
				x   x   x   x   x   x
				p3  p3 p4  p4  p4  p4

		SJF -

				0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
				x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x  x
				p2  p2  p2  p2  p2  p2  p2  p2  p4  p4  p4 p4  p3  p3  p3  p3  p3  p1  p1  p1  p1

				21  22  23  24  25  26 
				x   x   x   x   x   x  
				p1  p1  p1  p1  p1  p1 

		SRTF - 

				0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
				x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x  x
				p2  p2  p2  p2  p2  p2  p2  p2  p4  p4  p4 p4  p3  p3  p3  p3  p3  p1  p1  p1  p1

				21  22  23  24  25  26 
				x   x   x   x   x   x    
				p1  p1  p1  p1  p1  p1

		Nonpreprior -

				0   1   2   3   4   5   6   7   8  9  10  11  12  13  14  15  16  17  18  19
				x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x  x
				p2  p2  p2  p2  p2  p2  p2  p2  p4  p4 p4  p4  p1  p1  p1  p1  p1  p1  p1  p1

				20  21  22  23  24  25  26 
				x   x   x   x   x   x   x   
				p1  p1  p3  p3  p3  p3  p3
		

		Preprior -

				0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
				x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x  x
				p2  p2  p2  p1  p1  p3  p2  p4  p4  p4  p4 p2  p3  p1  p1  p3  p2  p2  p3  p1  p1

				21  22  23  24  25  26
				x   x   x   x   x   x    
				p3  p2  p1  p1  p1  p1

		RR -

				0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
				x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x  x
				p1  p1  p2  p2  p1  p1  p3  p3  p4  p4  p2 p2  p1  p1  p3  p3  p4  p4  p2  p2  p1

				21  22  23  24  25  26
				x   x   x   x   x   x    
				p1  p3  p2  p2  p1  p1

		Hybrid -

				0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
				x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x  x
				p2  p2  p1  p1  p2  p2  p3  p3  p4  p4  p3 p3  p3  p2  p2  p4  p4  p1  p1  p2  p2

				21  22  23  24  25  26
				x   x   x   x   x   x    
				p1  p1  p1  p1  p1  p1

	c. Manually calculate the average waiting time and average response time.

		FCFS -
	
		Response time:
		p1- 0
		p2- 10
		p3- 13
		p4- 16

		waiting time:
		p1- 0
		p2- 10
		p3- 13
		p4- 16

		Average response time: (0 + 10 + 13 + 16) / 4 = 9.75
		Average waiting time: (0 + 10 + 13 + 16) / 4 = 9.75

		SJF -
	
		Response time:
		p1- 17
		p2- 0
		p3- 7
		p4- 1

		waiting time:
		p1- 17
		p2- 0
		p3- 7
		p4- 1

		Average response time: (17 + 0 + 7 + 1) / 4 = 6.25
		Average waiting time: (17 + 0+ 7 + 1) / 4 = 6.25

 		SRTF -
	
		Response time:
		p1- 17
		p2- 0
		p3- 7
		p4- 1

		waiting time:
		p1- 17
		p2- 0
		p3- 7
		p4- 1

		Average response time: (17 + 0 + 7 + 1) / 4 = 6.25
		Average waiting time: (17 + 0 + 7 + 1) / 4 = 6.25

 		Nonpreprior 
	
		Response time:
		p1- 12
		p2- 0
		p3- 17
		p4- 1

		waiting time:
		p1- 12
		p2- 0
		p3- 17
		p4- 1

		Average response time: (12 + 0 + 17 + 1) / 4 = 7.5
		Average waiting time: (12 + 0 + 17 + 1) / 4 = 7.5

 		Preprior 
	
		Response time:
		p1- 3
		p2- 0
		p3- 0
		p4- 0

		waiting time:
		p1- 17
		p2- 15
		p3- 12
		p4- 1

		Average response time: (3 + 0 + 0 + 0) / 4 = 0.75
		Average waiting time: (17 + 15 + 12 + 1) / 4 = 11.25

 		RR 
	
		Response time:
		p1- 0
		p2- 1
		p3- 1
		p4- 2

		waiting time:
		p1- 12
		p2- 16
		p3- 12
		p4- 6

		Average response time: (0 + 1 + 1 + 2) / 4 = 1.0
		Average waiting time: (12 + 16 + 12 + 6) / 4 = 12.5

 		Hybrid 
	
		Response time:
		p1- 2
		p2- 0
		p3- 1
		p4- 1

		waiting time:
		p1- 16
		p2- 10
		p3- 2
		p4- 5

		Average response time: (2 + 0 + 1 + 1) / 4 = 1.0
		Average waiting time: (16 + 10 + 2 + 5) / 4 = 8.25

	d. Show the output of your algorithm to ensure correctness.
	
			In the folder: "/Small-Process-Output"

		FCFS: See FCFS-Output.txt

		SJF: See SJF-Output.txt

		SRTF: See SRTF-Output.txt
		
		Nonpreprior: See Nonpreprior-Output.txt

		Preprior: See Preprior-Output.txt

		RR: See RR-Output.txt
		
		Hybrid: See Hybrid-Output.txt

5. Analysis Results - Using a larger input file (50 processes), show a table which compares the results of all different scheduling algorithms. In addition, for the rr algorithm show a graph of the different analysis measurements as a function of the quantum time. If your own scheduling algorithm has parameters as well, show how they affect the analysis measurements in a graph as well.

	Using "Large-Processes.txt", Quantum = 2:

	Algorithm:	FCFS	SJF	SRTF	NonPre	Prepri	RR	Hybrid
	
	Avg Resp Time:	494.86	306.30	303.32	493.26	335.22	22.08	202.9
	
	Weighted Resp:	480.96	325.90	324.63	467.73	436.47	21.43	88.76
	
	Avg Wait Time:	494.86	306.62	305.46	493.26	583.82	614.56	536.38
	
	Weighted Wait:	480.96	327.41	324.63	467.73	730.07	624.56	395.72
	
	--Quantum Graphs in "quantum_graphs.xlsx"	

6. Conclusion - Which algorithms worked the best and in what cases.

	Manny

7. An appendix describing which part of the project each team member was in charge of.

	- Manny was in charge of designing the program and writing the skeleton for all the algorithms and classes.
	- Manny designed and coded the FCFS, SJF, and SRTF scheduling algorithms
	- Advised and made sure each of the algorithms was supposed to work as intended

	- Conrad designed and coded the Nonpreprior, Preprior, RR, and Hybrid scheduling algorithms
	- Conrad was in charge of analyzing all the algorithms with a large process file
	- Conrad tested RR, and Hybrid with different quantum times

8. References - If necessary.

	Manny - tenoriom@lafayette.edu
	Conrad - stoerkec@lafayette.edu
